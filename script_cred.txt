abc@abc-MS-7A15:~/Desktop/shahbaz/detail$ cat script_cred.txt 

ubuntu@ip-172-31-19-250:~$ history
    1  # Add Docker's official GPG key:
    2  sudo apt-get update
    3  sudo apt-get install ca-certificates curl
    4  sudo install -m 0755 -d /etc/apt/keyrings
    5  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    6  sudo chmod a+r /etc/apt/keyrings/docker.asc
    7  # Add the repository to Apt sources:
    8  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    9    $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   10  sudo apt-get update
   11  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   12  docker ps
   13  sudo docker run hello-world
   14  docker ps
   15  sudo usermod -aG docker $USER
   16  ls
   17  exit
   18  ls
   19  aws --version
   20  sudo snap install aws-cli 
   21  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
   22  unzip awscliv2.zip
   23  sudo apt install unzip
   24  unzip awscliv2.zip
   25  sudo ./aws/install
   26  aws --version
   27  aaws configure
   28  aws configure
   29  exit
   30  aws configure 
   31  aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 400908163598.dkr.ecr.us-east-2.amazonaws.com
   32  cd .aws/
   33  ls
   34  cat config 
   35  cd ..
   36  rm -rf .aws/credentials 
   37  rm -rf .aws/config 
   38  aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 400908163598.dkr.ecr.us-east-2.amazonaws.com
   39  docker logout
   40  service nginx status
   41  service apache2 status
   42  docker ps
   43  docker rm -f 04d2cbe0c624
   44  docker ps
   45  docker kill my-react-app
   46  docker ps
   47  docker images ls
   48  ls
   49  docker image ls
   50  docker rmi 02af57529bb5
   51  ls
   52  docker image ls
   53  docker ps
   54  docker ps -a
   55  docker rm -f 645560b4bf63 5b29143e58b8
   56  docker system prune -a --force
   57  docker ps
   58  docker exec -it a2540c878291 bash
   59  docker ps
   60  docker exec -it 90ca79b62b80 bash
   61  docker ps
   62  docker exec -it ec850660772f bash
   63  sudo apt install nginx -y
   64  sudo snap install certbot --classic
   65  sudo su
   66  ls
   67  rm -rf awscliv2.zip 
   68  df -h
   69  docker system df -h
   70  docker system df 
   71  docker ps
   72  curl ifconfig.me
   73  docker system prune -a --force
   74  ls
   75  history

===================================================================================



name: backend

on:
  push:
    branches:
      - master

permissions:
  id-token: write  # âœ… Required for OIDC authentication
  contents: read

jobs:
    build:
        runs-on: ubuntu-latest    
        steps:
            - name: get_code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::637527414831:role/github-oidc
                role-session-name: GitHubActionsSession
                aws-region: us-east-2  # Change to your AWS region

            # - name: Configure AWS CLI
            #   run: |
            #     aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            #     aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #     aws configure set region ${{ secrets.AWS_REGION }}

            - env:
                ENV: ${{ secrets.BACKEND }}
              run: echo -e "$ENV">.env
            
            - name: Docker Cli login
              run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 637527414831.dkr.ecr.us-east-2.amazonaws.com

            - name: Build Docker Image
              run: docker build -t golu .

            - name: Tag and Push docker image to ECR
              run: |
                docker tag golu:latest 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                docker push 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest

                
             

    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Set up SSH key for EC2 access
              run: |
                    mkdir -p ~/.ssh
                    echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                    chmod 600 ~/.ssh/id_rsa

            - name: SSH into EC2 and execute commands 
              run: |
                    ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
                    set -e
                    echo "Docker Login"
                    aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 637527414831.dkr.ecr.us-east-2.amazonaws.com
                    docker pull 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                    echo "pull done"
                    docker logout 
                    echo "removing older container"
                    docker rm -f golu-react-webapp
                    echo "done"
                    echo "Running New container"
                    sudo docker run -d --name golu-react-webapp -p 3000:3000 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                    echo "Done" 
                    docker system prune -a --force 
                    '
=====================================================================================



# Use official Node.js image as the base image
FROM node:20

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json (if available)
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose the port the app will run on
EXPOSE 3000

# Command to start the backend application
CMD ["npm", "start"]
  
================================================================

deploy wordpress through dockerfile on nginx

===================================================================================

name: Deploy to Server Backend_Code 

on:
  push:
    branches:
      - staging
    paths:
      - 'backend_code/**'        (this is file name in git repo where code reside )
      - '.github/workflows/stage_backend_code.yaml'  (bcoz any change in this workflow file will also trigger flow 
      
jobs:
  build-push-deploy:
    runs-on: self-hosted
=============================================================================


create different of prod workflow recommend always create in differnt branch)


when you set manually trigger. while trigerring it always ask for branch

===========================================================================================



name: nocred

on:
    push:
        branches:
            - main

permissions:
  id-token: write
  contents: read     

jobs:
    build:
      runs-on: ubuntu-latest  
      
      steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Set up AWS credentials via OIDC 
            id: aws-oidc
            uses: aws-actions/configure-aws-credentials@v1
            with:
              role-to-assume: arn:aws:iam::637527414831:role/github-actions 
              aws-region: us-east-2

          
          - name: Retrieve secret from AWS Secrets Manager
            run: |
                SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:us-east-2:637527414831:secret:nocred2-5xwQFb | jq -r '.SecretString | fromjson | .env')
                echo $SECRET_VALUE > .env
                cat .env
    # 
          - name: Create Docker Image
            run: |
                  docker build -t nocred2 .
                  docker tag nocred2:latest 637527414831.dkr.ecr.us-east-2.amazonaws.com/nocred2:latest

          - name: Login to amazon ECR 
            run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 637527414831.dkr.ecr.us-east-2.amazonaws.com

          - name: Push Docker image to ECR
            run: docker push 637527414831.dkr.ecr.us-east-2.amazonaws.com/nocred2:latest


          - name: Clean up old script
            run: aws ssm send-command     --instance-ids "i-05c2fb979fca7ffc2"     --document-name "AWS-RunShellScript"     --parameters 'commands=["sudo rm -rf /tmp/deploy.bash"]'     --timeout-seconds 600 --region us-east-2

          - name: Copy public to S3
            run: aws s3 cp deploy.bash s3://nocred2/deploy.bash

          - name: Create new script
            run: aws ssm send-command     --instance-ids "i-05c2fb979fca7ffc2"     --document-name "AWS-RunShellScript"     --parameters 'commands=["sudo aws s3 cp s3://nocred2/deploy.bash /tmp/deploy.bash && chmod 777 /tmp/deploy.bash"]'     --timeout-seconds 600 --region us-east-2

          - name: Sleep
            run: sleep 10 
            
          - name: Deploy code
            run: aws ssm send-command   --instance-ids "i-05c2fb979fca7ffc2"     --document-name "AWS-RunShellScript"     --parameters 'commands=["bash /tmp/deploy.bash"]'     --timeout-seconds 600 --region us-east-2
